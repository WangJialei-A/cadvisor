// Copyright 2019 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// generated by build/assets.sh; DO NOT EDIT

// Code generated by go-bindata. DO NOT EDIT.
// sources:
// pages/assets/html/containers.html (10.629kB)

package pages

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pagesAssetsHtmlContainersHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x4d\x73\xdb\x38\xd2\x3e\xbf\xfa\x15\x3d\xac\xf7\x30\x5b\x15\x52\x76\x9c\xcb\xce\xca\xaa\xd2\x28\xc9\x8e\x36\xfe\x2a\xcb\x9e\xa9\x39\x42\x64\x8b\x44\x0c\x12\x08\x00\x4a\xd6\xba\xf4\xdf\xb7\x00\x90\x32\x49\x91\x92\x6c\xab\x9c\x5c\x22\x03\x8d\xa7\x9f\xfe\x02\x1a\x24\x07\xbf\xf8\x7e\x0f\x60\xcc\xc5\x4a\xd2\x38\xd1\xf0\xf1\xe4\xf4\x13\xfc\x9b\xf3\x98\x21\x4c\xb2\x30\x80\x11\x63\x70\x6b\xa6\x14\xdc\xa2\x42\xb9\xc0\x28\xe8\xf5\x00\x2e\x68\x88\x99\xc2\x08\xf2\x2c\x42\x09\x3a\x41\x18\x09\x12\x26\x58\xce\x7c\x80\x3f\x51\x2a\xca\x33\xf8\x18\x9c\xc0\xaf\x46\xc0\x2b\xa6\xbc\x7f\xfc\xab\x07\xb0\xe2\x39\xa4\x64\x05\x19\xd7\x90\x2b\x04\x9d\x50\x05\x73\xca\x10\xf0\x31\x44\xa1\x81\x66\x10\xf2\x54\x30\x4a\xb2\x10\x61\x49\x75\x62\xd5\x14\x20\x41\x0f\xe0\xef\x02\x82\xcf\x34\xa1\x19\x10\x08\xb9\x58\x01\x9f\x57\xe5\x80\x68\xc3\xd7\xfc\x4b\xb4\x16\xbf\xf5\xfb\xcb\xe5\x32\x20\x96\x6b\xc0\x65\xdc\x67\x4e\x4e\xf5\x2f\x26\xe3\x2f\x57\xd3\x2f\xfe\xc7\xe0\xc4\xac\xb8\xcf\x18\x2a\x05\x12\x7f\xe4\x54\x62\x04\xb3\x15\x10\x21\x18\x0d\xc9\x8c\x21\x30\xb2\x04\x2e\x81\xc4\x12\x31\x02\xcd\x0d\xdb\xa5\xa4\x9a\x66\xf1\x07\x50\x7c\xae\x97\x44\x62\x0f\x20\xa2\x4a\x4b\x3a\xcb\x75\xcd\x55\x25\x37\xaa\x6a\x02\x3c\x03\x92\x81\x37\x9a\xc2\x64\xea\xc1\xef\xa3\xe9\x64\xfa\xa1\x07\xf0\xd7\xe4\xee\x8f\xeb\xfb\x3b\xf8\x6b\x74\x7b\x3b\xba\xba\x9b\x7c\x99\xc2\xf5\x2d\x8c\xaf\xaf\x3e\x4f\xee\x26\xd7\x57\x53\xb8\xfe\x0a\xa3\xab\xbf\xe1\xdb\xe4\xea\xf3\x07\x40\xaa\x13\x94\x80\x8f\x42\x1a\xfe\x5c\x02\x35\x4e\x34\x71\x03\x98\x22\xd6\x08\xcc\xb9\x23\xa4\x04\x86\x74\x4e\x43\x60\x24\x8b\x73\x12\x23\xc4\x7c\x81\x32\xa3\x59\x0c\x02\x65\x4a\x95\x09\xa5\x02\x92\x45\x3d\x00\x46\x53\xaa\x89\xb6\x23\x5b\x46\x05\x3d\xdf\x1f\xf6\x7a\x83\x44\xa7\xcc\xfe\x8f\x24\x1a\xf6\x00\x06\x9a\x6a\x86\xc3\x70\x14\x2d\xa8\xe2\x12\x7c\x78\x7a\x0a\x3e\x53\x25\x18\x59\x5d\x91\x14\xd7\xeb\x41\xdf\x89\x18\x61\x15\x4a\x2a\x34\x28\x19\x9e\x7b\x4f\x4f\xc1\x2d\xe7\x7a\xbd\x56\x46\x69\xd8\x17\x5c\x08\x94\x41\x4a\xb3\xe0\xbb\xf2\x86\x83\xbe\x13\xb6\xeb\x7e\xf1\x7d\xb8\x20\x1a\x95\xb6\xc9\x43\x19\x46\x86\x34\xa4\x34\xa3\x73\x8a\x11\x8c\xa7\x53\x30\x04\x01\x06\x8c\x66\x0f\x20\x91\x9d\x7b\x4a\xaf\x18\xaa\x04\x51\x7b\x90\x48\x9c\x6f\xeb\x9c\x71\xae\x95\x96\x44\xf8\x9f\x82\x93\xe0\xc4\x9f\xa1\x26\xc1\x47\xcb\x21\x54\xca\x1b\xf6\x4a\xe5\xd7\xc2\xf8\x85\x30\xe3\x92\x14\xdf\xa6\xca\x42\xf8\x67\xc1\x69\x70\xda\xd0\xf4\x12\xbc\x90\x67\xa6\x3c\x50\xaa\x06\xd5\x9d\x7e\xfa\x0f\x59\x90\xa9\x0b\x42\x61\xc3\xae\x90\x7c\xff\x91\xa3\x5c\xf9\x67\xc6\x37\xed\x81\xd9\xb5\x7a\x87\x73\xbb\x70\xf4\x4a\xe0\xb9\xa7\xf1\x51\xf7\xbf\x93\x05\x71\xa3\x5e\x3b\x7c\x6c\xf7\x33\xff\xbb\x22\x82\x36\x00\x5f\x89\x58\x71\xe9\x51\x08\x86\x09\x91\xba\x89\x35\xe8\xbb\xd2\xe9\x0d\x66\x3c\x5a\x59\xec\x88\x2e\x20\x64\x44\xa9\x73\x6f\x43\xc1\x25\x9a\xaf\x12\xbe\x0c\x89\x42\x6f\x68\x77\xbb\x01\x69\x66\x83\xf7\xbc\x92\xf9\x2a\xf5\x4f\x3f\x7a\x40\xa3\x73\x8f\xf1\x98\x97\x8b\xfa\xa4\xf8\x51\x53\x54\x8a\x0f\x8b\x7d\xb4\x3a\x2b\x48\x8c\xbe\xe1\x89\x72\x33\x0f\x30\x48\x4e\x87\xdb\xd5\x9d\x9c\x6e\x10\xfa\x11\x5d\x6c\xfe\xe0\xac\x44\x9b\x49\x24\x51\x28\xf3\x74\x56\x01\x7b\x7a\x92\x24\x8b\x11\xfe\x5f\x10\x89\x99\x1e\x6f\x0c\xff\xed\x1c\x82\x9b\xfa\x98\x5a\xaf\x9f\x49\x30\x3a\xac\xb8\xa1\xb9\x3c\xb8\xa0\xd9\xc3\x7a\xed\x0d\x5b\xa6\xee\xf0\x51\x1b\xc6\x64\x38\xe8\x33\x5a\xa5\x82\x59\xb4\x51\x31\xe8\x73\x56\x3a\x6e\x63\xcf\xd3\x13\x9d\x43\x30\x51\xce\xe9\x87\x78\x33\xf9\xf4\x4c\x33\x08\xfa\x11\x0f\x1f\x8c\x33\x3f\xdb\xff\xe1\xd9\x34\x47\x27\xf9\xd4\xa2\xf2\x99\x95\x53\x3f\xcd\x67\x61\xd3\x25\x6f\x8f\xe9\xd9\xb0\x86\x3b\xe8\x27\x67\xed\x01\xad\x60\x31\xaa\xb4\x1f\x4b\x9e\x8b\xb6\x88\xaa\x0a\x9e\x0d\x67\x1b\xf1\x46\x3a\xd7\x16\x95\x41\xdc\x56\xe7\x53\x8d\xa9\x0d\x6e\x4d\xfe\x39\xb2\x9d\x41\xdd\x58\xb2\xd3\xc5\x2e\x3c\x53\x4d\x74\x7e\x4c\x0f\x7f\x96\x74\x81\x12\x1c\x6e\xb7\x87\x73\x76\x98\x83\x5d\x32\x29\x8b\x66\x1d\xdc\x42\xbb\xa8\x95\x4e\x17\x0e\x94\x20\x59\x39\x6b\xa0\x7c\x46\x66\xc8\xac\x6f\xab\xf8\xc1\x37\x5c\x19\xd7\x1a\xf1\x21\x34\x27\xff\x24\x2c\xb7\xbb\x40\x77\x3d\xd5\x5d\xeb\x3c\x71\x1c\xa6\x53\xcd\x25\x89\x71\x30\x93\xc3\x82\xdf\x06\x6f\xbf\x33\xeb\x0e\xb5\xac\xb6\x1c\xda\x41\xf6\x4d\xae\xad\x68\xda\x76\x6d\x75\xb2\x70\x6d\x5d\x6b\xcd\xcf\x6d\xbe\x36\x32\x39\xab\x64\x5f\x65\x45\x75\xa6\xba\xee\x80\x8a\x98\xa4\x24\xc6\x63\x56\x84\x03\xdc\xbd\xd9\x98\x73\xcc\x65\x9b\x4f\xad\xb8\x39\x47\xab\x42\x26\xf0\x33\x79\x40\x59\xdf\xa2\xe2\xb9\x0c\x51\x8d\x16\x84\x32\xd3\xea\x1f\xd3\x14\xc5\x99\x6d\x9b\x3b\xad\x71\x24\xc6\x22\x6f\xaa\xdf\x9f\xa6\xdd\x79\x06\x24\xd4\x74\x61\x6e\x1b\x85\x7a\xdf\xf6\xd9\x20\x48\x86\xcc\xfd\xf6\x86\xe3\x9b\xfb\x66\x6d\xda\x93\x44\x60\x68\xf8\x04\x17\xa6\xe7\x7f\x73\x1d\x26\x44\x9a\x58\x96\x79\x2c\x24\xcd\xb4\x1b\xdc\x56\x05\x16\xa6\x96\xc3\x05\x64\x9e\xd1\x0d\xa4\xaa\x42\x1e\xb2\xbb\x6c\xd4\x5c\x92\xc7\xa3\x18\x75\x49\x1e\xc1\x02\x35\xec\x1a\xf3\xba\x59\xcf\xfa\x0e\xb3\x2c\xe4\xaf\x36\x4c\x3d\xbc\xd5\xa8\x11\x63\x7c\x69\xae\x4b\x15\x12\x15\xc2\x85\x89\x46\x53\x43\x31\x04\x97\x24\x4c\x68\x86\x93\x6c\xce\x83\xab\x3c\xb5\x08\xbb\x37\xfe\xae\xed\xa6\xb4\xec\x12\x53\x2e\x57\xef\x5e\x12\x4e\x6d\x67\x55\xb8\xe9\xc0\x3d\x16\xb1\x20\x6f\x75\x7a\x05\xaa\x59\x23\xf4\xbf\x78\x88\x5a\x80\x1a\x78\x35\x9d\x0a\xa4\xfb\x8c\xea\x1d\x48\x2f\xcd\xb7\x02\xe3\x28\x85\xd4\x56\x44\xdb\x86\xbf\xa8\x86\x3a\x8d\x2e\x50\x5e\x69\xee\x74\x49\xc4\x71\x36\xc4\x25\x11\xad\x9b\xc7\xb6\xdd\x6d\x3a\x5f\x13\xee\x0a\xce\x01\xd6\x1f\xd0\x09\x1c\xe3\x64\xbc\x57\xa6\x3d\x3b\xe4\x42\x61\x2b\xb4\xa8\x53\x21\x69\x4a\xe4\xaa\x8a\xd5\x94\xb4\xea\x68\x16\xd7\xfa\xb9\x41\x72\x56\x17\x2a\x0a\xfe\x7a\x81\x72\x41\x71\x59\x25\xd2\xa0\x52\x69\x38\x72\xc3\xd9\x8f\x49\x1e\xa3\x57\x87\x33\xf7\xf5\x66\x07\xf2\x33\xec\xb9\x91\x3c\x44\xa5\xea\xdd\x53\xb7\x41\xa2\x14\xf7\x35\x17\x07\x9b\xf4\xde\x36\xa1\x9c\xc3\x98\xe7\x99\x46\xb9\xdf\xac\x16\x1b\x6a\x3a\x3e\x0d\xc7\x37\x93\xe7\x4b\x75\xc3\x21\xa1\xa0\xbe\x7d\x34\xd3\xb0\xbc\x5c\x7b\x79\xf3\xad\x7b\x71\x2a\x1e\xf6\xac\xb6\xf5\x68\x9f\xc2\x65\xe1\xaa\x1b\xc7\x8a\xf9\xcc\x89\xed\x44\x1c\xaf\x42\x86\xdd\xd6\x98\xd9\xdd\xeb\xed\x03\xfc\x4b\xaa\x54\x37\x88\x11\xf1\x53\xaa\xd4\x4e\xa4\x8b\x33\x0b\x03\x96\x51\x37\x1a\x3b\x2b\xa0\xac\xd8\x41\x88\xb7\xf8\x23\x47\xa5\xf7\x63\xca\x42\x70\x27\xea\x24\x53\x5a\xe6\x61\xd1\x93\xb7\x03\xd2\x67\x99\x0e\xac\xd6\xb2\x38\xa0\xa3\x7f\xa7\x92\xb1\xad\xfd\xdb\x2b\xe5\x8e\x6b\xc2\xa0\xdc\xa9\xbb\x2a\x26\xf7\xb5\x91\xf3\xdd\xee\xd8\xe9\xfb\x5f\x7c\xbf\x28\xbf\x7b\xb8\xe0\x24\x82\xd1\x02\xe5\x06\xf9\xff\xb6\x40\x19\x27\x51\x1d\xad\x78\x2c\x5d\x65\x68\xb9\x81\xb0\x4f\xcd\xe4\x6e\x92\x02\xa5\x6f\x1a\xec\x7d\x3c\x37\xa8\xbf\x4b\x24\x0f\x11\x5f\x76\xe7\x89\x81\x75\x68\xb3\x52\xf6\x05\xf9\x52\x66\xcb\x0b\xba\xdf\x77\x4a\x9f\xb2\x0d\x7e\x9f\x0c\x2a\xb6\xbb\x3d\x61\x99\x49\xe8\x6f\x2d\x2f\x08\x48\xbe\x84\xed\x3e\xe4\xe0\x78\xb6\x36\x34\xff\x6c\xe0\x34\x4c\x96\x3c\x96\x68\xdf\xad\x00\xec\x17\xf3\x67\x44\x42\xf5\x0f\x3f\x22\x59\x8c\xd2\x2b\x4f\x61\x37\x91\x70\xed\x3b\x6f\xb4\xe0\x36\x3a\x3f\x25\x7d\x9e\xb1\x95\x37\xfc\x83\x6b\x28\x03\xd6\xbc\xb4\xb5\x86\xee\x65\x44\x69\x36\xe7\x0d\x9a\x21\x67\xd1\xcb\x79\x8e\x39\x8b\x5e\x43\xb4\x65\xb0\x6d\x68\x3b\x82\x67\x5e\x35\xbd\x34\x3e\xb6\xe6\xd5\x5b\xea\xf4\x0a\xf5\x92\xcb\x87\x9f\x57\xa8\x05\x81\x37\x57\x6a\x45\x24\x92\x5c\x98\x22\x69\x96\xd1\x2c\xd7\x9a\x6f\xa2\x3a\xd3\x19\xcc\x74\xe6\x47\x38\x27\x39\xd3\x50\xae\xf2\x35\x8f\x63\x86\x5e\xf1\x32\xcc\x2d\x72\x71\xc8\x1c\x57\x5f\x21\x43\x77\xb4\x6e\x54\x35\x22\x1e\x11\x4d\x0a\xa0\x0a\x1f\x20\x92\x12\x3f\x21\x4a\x70\x91\x8b\x73\x4f\xcb\x1c\x8b\x41\x7c\x14\x24\x8b\x30\x3a\xf7\xe6\x84\x6d\x5e\x88\x35\x13\xb2\x9d\x44\x99\x17\x6d\x19\x59\x4b\xe4\x90\x48\xec\x90\x1c\xf4\x9d\xa1\x8d\xd1\x9c\xb5\xeb\xf4\x9a\xbe\xf6\x53\xcc\x72\x0f\x24\x37\x06\xbb\xdf\xd6\x2e\x7b\xb1\x63\x18\xcd\x56\x3b\xdd\xd7\x24\x53\x7d\xc6\xbb\x3b\xc3\x0f\xdf\xc7\x13\xc9\xf3\x38\x11\xb9\xee\xdc\xc6\x4b\x82\xb3\x95\xee\x6c\xec\x5e\xa7\xfc\x8b\x94\x5c\x76\xb7\x7f\xa5\x62\xb4\x62\x47\x39\x80\xbf\x6e\x3d\x0c\x7e\xbf\x9a\xfe\x4a\x19\xaa\x95\xd2\x98\x1e\x76\x87\x9b\x6f\xe4\xdd\x11\xda\x7a\x8d\x7b\xa5\x1f\xc6\xb9\xd2\x3c\xbd\x44\x2d\x69\xf8\x13\x5d\x32\x72\x5f\xe1\x98\xac\x87\x82\xcc\x51\xb6\x3c\xdb\xc3\x59\x13\xfd\xd4\xc1\x1e\x25\x7b\x6a\xaf\x34\x7f\x9e\xd7\x3a\x5f\xdd\xbe\xbe\x99\x13\x60\xba\x77\xdb\x4e\xfd\x56\xdf\x74\x68\x26\x72\x5d\xeb\xb5\xab\x2f\x61\xfd\xc8\x7d\x17\xe0\x87\xe6\x1a\xbf\xc9\xd0\x56\x11\x8b\xe4\xc1\x82\xb0\x1c\xcf\x4f\x4f\xea\x5b\xd9\x9e\xfe\xbe\x06\x58\x6b\x28\x8f\xbe\x21\x72\x51\x34\x33\x7b\xdc\x51\xb4\x1f\xef\xe5\x91\x5a\xeb\xe5\xc0\x24\x67\xac\x82\x36\x63\x3c\x7c\x68\x9e\x19\xad\xa7\x5f\xa3\x41\x3f\xd8\xc1\xfb\x9c\xdc\x59\x40\xad\xef\xe9\x36\x83\xbb\xbf\xb3\x71\xcb\x94\x26\x52\xdf\x90\x18\x7f\x7d\x7a\x0a\x36\x1f\x52\x5c\x91\x14\x61\xbd\xfe\x00\x66\xb0\x72\x2f\x2f\xc7\x1a\xf7\xad\x72\xf8\x96\x73\x5d\xfe\x76\x9f\x77\xc0\x7a\x6d\xbf\x64\x04\x88\x24\x59\xba\xf7\x94\x46\x53\xf5\x45\x68\x29\x53\xfd\xac\xc7\x7d\xce\xd3\x1b\xf4\xdd\x27\x72\xff\x0b\x00\x00\xff\xff\x80\xe2\xad\x80\x85\x29\x00\x00")

func pagesAssetsHtmlContainersHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pagesAssetsHtmlContainersHtml,
		"pages/assets/html/containers.html",
	)
}

func pagesAssetsHtmlContainersHtml() (*asset, error) {
	bytes, err := pagesAssetsHtmlContainersHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pages/assets/html/containers.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x98, 0xc7, 0xa4, 0x33, 0xfd, 0xa0, 0x3d, 0x69, 0xec, 0x85, 0x45, 0xb5, 0x81, 0xb0, 0xc1, 0x18, 0xe1, 0x61, 0xaa, 0x60, 0xb2, 0xeb, 0x32, 0x88, 0x6e, 0x5, 0xb4, 0xe5, 0xe4, 0xd0, 0x58, 0x39}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pages/assets/html/containers.html": pagesAssetsHtmlContainersHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"pages": {nil, map[string]*bintree{
		"assets": {nil, map[string]*bintree{
			"html": {nil, map[string]*bintree{
				"containers.html": {pagesAssetsHtmlContainersHtml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
